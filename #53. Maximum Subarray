Description: 
  
  Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.
  Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.
  
Example: 
  Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
  Output: 6
  Explanation: [4,-1,2,1] has the largest sum = 6. 
  
  Input: nums = [1]
  Output: 1
  
  
/**************************    Method #1: Greedyï¼š  **************************/
# Greedy Algorithm: pick the locally optimal at each step, and that will lead to the globally optimal solution;
# What's scenario can use Greedy Algorithm:
      An optimization problem can be solved using Greedy if the problem has the following propery:
          At every step: we can make a choice that look best at that moment, and we go the optimal solution of the complete problem.
# Gernally more efficient than DP


/* For this problem:
   It is to find the maximum sum for contiguous subarray, so pick locally optimal move at each step and that will lead to global solution. 
   So iterate over the array an update at rach step
 */
 
 Current local maximum sum (at this given point); global maximum sum
 
/%%%%%%%% Coding: %%%%%%%%/
class Solution {
    public int maxSubArray(int[] nums) {
    int n = nums.length: //get the length of array nums
    int curr_max_sum = nums[0]; // define current local maximum sum, and the initial value is nums[0]
    int max_sum = nums[0]; //define global maximum sum, and the initial value is nums[0]

    for(int i = 1; i < n; i++){   //using loop to iterate array nums from nums[1]
    	curr_max_sum = Math.max(nums[i], nums[i] + curr_max_num); 

    	//If num[si] > curr_max_num + nums[i], adapt the original curr_max_ num, let curr_max_num = //nums[i] and let's start with this point to be the first element of subarray
    	//If nums[i] < curr_max_num + nums[i], continue to add the element to curr_max_num
    	
    	max_sum = Math.max(max_sum, curr_max_sum); //let global max sum always keep the maximum value 
     }
     return max_sum;
    }
   }

/%%%%%%%% Time Complexity %%%%%%%%/
Cause there is only one loop from 1 to n, so the time complexit is O(n - 1) = O(n)

/%%%%%%%% Question: If there are two equal values, x1 = x2, what will be returned for Math.max(x1,x2)? %%%%%%%%/

Math.max() is a static function, and the result is the argument closer to the value of Max_VALUE.   
If the arguments have the same values, the result is same value. 
If either value is NaN, then the result is NaN.  
For the float/double, this method considers negative zero to be strictly smaller than positive zero. 

