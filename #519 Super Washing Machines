Description:
You have n super washing machines on a line. Initially, each washing machine has some dresses or is empty.

For each move, you could choose any m (1 ≤ m ≤ n) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines at the same time .

Given an integer array representing the number of dresses in each washing machine from left to right on the line, you should find the minimum number of moves to make all the washing machines have the same number of dresses. If it is not possible to do it, return -1.

Example1

Input: [1,0,5]

Output: 3

Explanation: 
1st move:    1     0 <-- 5    =>    1     1     4
2nd move:    1 <-- 1 <-- 4    =>    2     1     3    
3rd move:    2     1 <-- 3    =>    2     2     2   
Example2

Input: [0,3,0]

Output: 2

Explanation: 
1st move:    0 <-- 3     0    =>    1     2     0    
2nd move:    1     2 --> 0    =>    1     1     1     
Example3

Input: [0,2,0]

Output: -1

Explanation: 
It's impossible to make all the three washing machines have the same number of dresses. 
Note:

The range of n is [1, 10000].
The range of dresses number in a super washing machine is [0, 1e5].


/**************************    Method #1: Greedy：  **************************/
# Greedy Algorithm: pick the locally optimal at each step, and that will lead to the globally optimal solution;
# What's scenario can use Greedy Algorithm:
      An optimization problem can be solved using Greedy if the problem has the following propery:
          At every step: we can make a choice that look best at that moment, and we go the optimal solution of the complete problem.
# Gernally more efficient than DP


/* For this problem:
  we can seperate it into two parts:(N machines and D dress) 

 1. Can the problem be solved or not?

 	If the dresses could be divided into N equal parts?
 		
 		D % N == 0; Yes
 		d % N != 0; No

 2. If the dreses could be divided into N equal parts, How to make each machine has D dresses?

 		Average = N /D;

 	    Cause the machine can pass one dress of each washing machine to one of its adhacent washing machines at the same time, so the key solution of it to find the max "throughput" going from the leftmost washer to the rightmost washer.

 	    Firstly, we need to find how many dresses needed moved into it for each machine: [1,0,5] ->[2,2,2]
 	    => [-1,-2,3] the first machine need moved one into it, 2nd needs 2 and 3rd need to move out 3 dresses.

 	    So the question is simplized to sovle how to let each value of array[-1,-2,3] is 0;

 	    Then, we start from leftmost item, the 1st needs 1 dress from 2nd machine -> [0,-3,3]
 	    so the 2nd machine needs 3 dresses move in and 3nd need 3 dresses move out, so the minimum number of movers is 3
 */
 
 /%%%%%%%% Coding: %%%%%%%%/
 
 
 class Solution {
    public int findMinMoves(int[] machines) {
    	int n = machines.length;
    	int dresses = 0;
    	for(int i = 0; i < n; i++)
    		dresses = dresses + machines[i]; //compute the total number of dresses 

    	if(dresses % n != 0) //identify if the problem can be solved 
    		return -1;

 		int average = dresses / n; //caculate the average number of each machine

    	for(int i = 0; i < n; i++)  //caculate how many dresses needed in each machine 
    		machines[i] = machines[i] - average;

    	int max = 0;
    	int cnt = 0;

    	for(int i = 0; i < n; i++){
    		cnt = cnt + machines[i]; //count how many dresses needed to be moved in this point
    		max = Math.max(Math.max(Math.abs(cnt),max),machines[i]); //get the most throughput
    	}
    	return max;
    }
    }
    
    /%%%%%%%% Time Complexity %%%%%%%%/

Cause there are three loops from 0 to n - 1, so the time complexit is O(n)

/%%%%%%%% Question: 1 %%%%%%%%/
Why not Math.abs(load-avg)? Because [-1, 2 ,-1] and [1, -2, 1] are different!! 
The former can be balanced with 2 steps, but the latter can be balanced with only 1 step! 
That is to say, giving out loads and receiving loads are different. 
One machines can at most give 1 load each step, but can receive at most 2 loads each step. 
Therefore, finding the max positive to-balance load is what we want. Like [0, -7, 8, -1], no matter what you do or how you do it, 
the machines with 8 loads need no less than 8 to balance itself and become 0. 
(https://leetcode.com/problems/super-washing-machines/discuss/99185/Super-Short-and-Easy-Java-O(n)-Solution)

/%%%%%%%% Question: 2 %%%%%%%%/

Why Math.max(Math.max(Math.abs(cnt),max),machines[i]) is faster than Math.max(max,Math.max(Math.abs(cnt)),machines[i])?
          
